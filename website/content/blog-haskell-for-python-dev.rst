Haskell for python developers
#############################

:date: 2020-07-24
:category: blog
:authors: tristanC


.. raw:: html

   <style type="text/css">

     table {
       width: 100%;
       table-layout: fixed;
     }
     table, td, th, pre {
       border-color: lightgrey;
     }
     col {
       width: 50%;
     }

     td > div > div > pre {
       margin: 0px -7px;
       border: none;
     }
     ul.simple {
       padding-left: 15px;
     }

     table { height: 1px; }
     tr, td, td > div, td > div > div, td > div > div > pre { height: 100%; }
     body > div.container { width: 1196px; }

   </style>


.. note::

  Please be advised that this article is based on personal experimentation.
  The information may be incorrect. Please use at your own discretion.

In this article I will present what I learned about the Haskell language from a Python developer point of view.

.. raw:: html

   <!-- note: max code width is 61 col -->

Runtime
=======

========================================== ==========
Python                                     Haskell
========================================== ==========
python (the repl)                          ghci
#!/usr/bin/python (the script interpreter) runhaskell
python setup.py install (the compiler)     ghc
========================================== ==========

Package Manager
===============

============================ ==================
Python                       Haskell
============================ ==================
setup.cfg / requirements.txt project-name.cabal
setuptools / pip             cabal-install
venv + (lts) pip + setup.cfg stack
============================ ==================

Language
========

Features
--------

Before starting, let's see what makes haskell special.

Statically typed
~~~~~~~~~~~~~~~~

Every expression has a type and ghc ensure the types match at compile time:

+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Python                                                                                            | Haskell                                                                                           |
+===================================================================================================+===================================================================================================+
| .. code-block:: python                                                                            | .. code-block:: haskell                                                                           |
|                                                                                                   |                                                                                                   |
|    var1 = "Hello!"                                                                                |    var = "Hello!"                                                                                 |
|    print(var1 + 42)                                                                               |    print(var + 42)                                                                                |
|    # Runtime type error                                                                           |    -- Compile error                                                                               |
+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+

Type inference
~~~~~~~~~~~~~~

You don't have to define the types, ghc discover them for you:

+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Python                                                                                            | Haskell                                                                                           |
+===================================================================================================+===================================================================================================+
| .. code-block:: python                                                                            | .. code-block:: haskell                                                                           |
|                                                                                                   |                                                                                                   |
|    def list_to_upper(s):                                                                          |    list_to_upper s =                                                                              |
|        return map(str.upper, s)                                                                   |        map toUpper s                                                                              |
|    # What is the type of `list_to_upper` ?                                                        |    -- list_to_upper :: [Char] -> [Char]                                                           |
+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+

Lazy
~~~~

Expressions are evaluated only when needed:

+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Python                                                                                            | Haskell                                                                                           |
+===================================================================================================+===================================================================================================+
| .. code-block:: python                                                                            | .. code-block:: haskell                                                                           |
|                                                                                                   |                                                                                                   |
|    res = 42 / 0                                                                                   |    res = 42 / 0                                                                                   |
|    print("Done.")                                                                                 |    print("Done.")                                                                                 |
|    # Program halt before the print                                                                |    -- res is not used thus not evaluated, ghc print "Done."                                       |
+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+

Purely functional
~~~~~~~~~~~~~~~~~

Haskell program are made out of function composition and application, in comparison to imperative languages, which use procedural statements.

Immutable
~~~~~~~~~

Variable content can not be modified.

+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Python                                                                                            | Haskell                                                                                           |
+===================================================================================================+===================================================================================================+
| .. code-block:: python                                                                            | .. code-block:: haskell                                                                           |
|                                                                                                   |                                                                                                   |
|    class A:                                                                                       |    data A =                                                                                       |
|      b = 0                                                                                        |      A { b :: Integer }                                                                           |
|                                                                                                   |                                                                                                   |
|    a = A()                                                                                        |    a = A 0                                                                                        |
|    a.b = 42                                                                                       |    a { b = 42 }                                                                                   |
|    # The attribute b of `a` now contains 42                                                       |    -- The last statement create a new record                                                      |
+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+

Comments
--------

+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Python                                                                                            | Haskell                                                                                           |
+===================================================================================================+===================================================================================================+
| .. code-block:: python                                                                            | .. code-block:: haskell                                                                           |
|                                                                                                   |                                                                                                   |
|    # A comment                                                                                    |    -- A comment                                                                                   |
|    """ A docstring """                                                                            |    -- | A docstring                                                                               |
|    """ A multiline comment                                                                        |    {- A multiline comment                                                                         |
|    """                                                                                            |    -}                                                                                             |
+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+

Function
--------

+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Python                                                                                            | Haskell                                                                                           |
+===================================================================================================+===================================================================================================+
| .. code-block:: python                                                                            | .. code-block:: haskell                                                                           |
|                                                                                                   |                                                                                                   |
|    def add_and_double(m, n):                                                                      |    add_and_double m n =                                                                           |
|        return 2 * (m + n)                                                                         |        2 * (m + n)                                                                                |
|                                                                                                   |                                                                                                   |
|    double(20, 1)                                                                                  |    double 20 1  -- parenthesis and comma are not required                                         |
+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+

-  Parenthesis and comma are not required
-  Return is implicit.

Record
------

Group of values are defined using Record:

+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Python                                                                                            | Haskell                                                                                           |
+===================================================================================================+===================================================================================================+
| .. code-block:: python                                                                            | .. code-block:: haskell                                                                           |
|                                                                                                   |                                                                                                   |
|    class Person:                                                                                  |    data Person =                                                                                  |
|        def __init__(self, name):                                                                  |        Person {                                                                                   |
|            self.name = name                                                                       |          name :: String                                                                           |
|                                                                                                   |        }                                                                                          |
|                                                                                                   |                                                                                                   |
|    person = Person("alice")                                                                       |    person = Person "alice"                                                                        |
|    print(person.name)                                                                             |    print(name person)                                                                             |
+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+

Note:

-  the first line defines a ``Person`` type with a single ``Person`` constructor that takes a string attribute.
-  Record attribtues are actually function

Record value can be updated:

+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Python                                                                                            | Haskell                                                                                           |
+===================================================================================================+===================================================================================================+
| .. code-block:: python                                                                            | .. code-block:: haskell                                                                           |
|                                                                                                   |                                                                                                   |
|    new_person = copy.copy(person)                                                                 |    new_perso =                                                                                    |
|    new_person.name = "bob"                                                                        |      perso { name = "bob" }                                                                       |
+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+

Type annotations
----------------

+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Python                                                                                            | Haskell                                                                                           |
+===================================================================================================+===================================================================================================+
| .. code-block:: python                                                                            | .. code-block:: haskell                                                                           |
|                                                                                                   |                                                                                                   |
|    def putStr(s : str) -> None: ...                                                               |    putStr :: String -> IO ()                                                                      |
+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+

-  Type is ``String -> IO ()``
-  ``IO ()`` is a special type to indicate side-effecting IO operations

+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Python                                                                                            | Haskell                                                                                           |
+===================================================================================================+===================================================================================================+
| .. code-block:: python                                                                            | .. code-block:: haskell                                                                           |
|                                                                                                   |                                                                                                   |
|    def add_and_double(m : int, n: int) -> int:                                                    |    add_and_double :: Num a => a -> a -> a                                                         |
+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+

-  Type is ``a -> a -> a``, which means a function that takes two ``a`` and that returns a ``a``.
-  ``a`` is a variable type (type-variable).
-  Before ``=>`` are type-variable constrains, ``Num a`` is a constrain for ``a``.

(Type) class
------------

Class are expressed using type class. For example, objects that can be compared:

+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Python                                                                                            | Haskell                                                                                           |
+===================================================================================================+===================================================================================================+
| .. code-block:: python                                                                            | .. code-block:: haskell                                                                           |
|                                                                                                   |                                                                                                   |
|    # The `==` operator use object `__eq__` function:                                              |    -- The `==` operator needs Eq type class:                                                      |
|    class Person:                                                                                  |    data Person = Person { name :: String }                                                        |
|        def __eq__(self, other):                                                                   |    instance Eq Person where                                                                       |
|            return self.name == other.name                                                         |        self (==) other = name self == name other                                                  |
+---------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
